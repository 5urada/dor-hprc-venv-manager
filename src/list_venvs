#!/usr/bin/env python3

# Created 10-31-24 by Gabriel Floreslovo
# Modified by Ananya Adiki and Surada Suwansathit
# This script lists all of a user's virtual environments created by the create_venv script
# this is achieved by parsing the 'metadata.json' file in the user's '$SCRATCH/virtual_envs/' directory

import json
import os
import sys
import getpass
import datetime
import shutil
import textwrap
import argparse

# Import the centralized metadata utilities
from utils import load_all_metadata, load_user_metadata, load_group_metadata


def get_terminal_width():
    """Get the current terminal width, with a fallback."""
    try:
        return shutil.get_terminal_size().columns
    except:
        return 80  # fallback width


def truncate_text(text, max_length):
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def wrap_text(text, width):
    if len(text) <= width:
        return [text]
    return textwrap.wrap(text, width=width, break_long_words=True, break_on_hyphens=False)


def print_environments_table(metadata, group_name="your $SCRATCH"):
    """Print environments in a formatted table or compact list."""
    if len(metadata.get('environments', [])) == 0:
        print(f"\nYou have no environments in {group_name} currently available through 'activate_venv'\n")
        return
    
    envs = metadata.get('environments', [])
    
    # Get terminal width and determine display format
    try:
        terminal_width = get_terminal_width()
    except:
        terminal_width = 80
    
    # Use compact format for narrow terminals
    if terminal_width < 120:
        print(f"\nThese are your virtual environments in {group_name} currently available through 'activate_venv':\n")
        for i, env in enumerate(envs, 1):
            name = env.get('name', 'N/A')
            description = env.get('description', 'N/A')
            python_ver = env.get('python_version', 'N/A')
            gcc_ver = env.get('GCCcore_version', 'N/A')
            toolchain = env.get('toolchain', 'N/A')
            owner = env.get('owner', 'N/A')
            
            print(f"{i:2d}. {name}")
            if description != 'N/A' and description.strip():
                # Wrap description if it's long
                desc_lines = wrap_text(description, terminal_width - 8)
                for line in desc_lines:
                    print(f"    {line}")
            print(f"    Python: {python_ver}  |  GCC: {gcc_ver}")
            if toolchain != 'N/A' and toolchain.strip():
                print(f"    Toolchain: {toolchain}")
            if owner != 'N/A' and owner.strip():
                print(f"    Owner: {owner}")
            if i < len(envs):
                print()
    else:
        # Use table format with text wrapping for wide terminals
        print(f"\nThese are your virtual environments in {group_name} currently available through 'activate_venv':\n")
        
        # Calculate responsive column widths
        available_width = terminal_width - 8
        base_widths = [15, 25, 15, 15, 20, 15]  # name, desc, python, gcc, toolchain, owner
        total_base = sum(base_widths)
        
        if available_width > total_base:
            # Distribute extra space
            extra = available_width - total_base
            col_widths = base_widths.copy()
            col_widths[1] += extra // 2  # Give most extra space to description
            col_widths[4] += extra - (extra // 2)  # Rest to toolchain
        else:
            # Shrink proportionally if needed
            ratio = available_width / total_base
            col_widths = [max(8, int(w * ratio)) for w in base_widths]
        
        # Headers
        headers = ["Name", "Description", "Python Version", "GCC Version", "Toolchain", "Owner"]
        
        # Print header
        header_row = ""
        for i, header in enumerate(headers):
            header_row += f"{header:<{col_widths[i]}}"
        print(header_row)
        print("-" * sum(col_widths))
        
        # Print environments with text wrapping
        for env in envs:
            row_data = [
                env.get('name', 'N/A'),
                env.get('description', 'N/A'),
                env.get('python_version', 'N/A'),
                env.get('GCCcore_version', 'N/A'),
                env.get('toolchain', 'N/A'),
                env.get('owner', 'N/A')
            ]
            
            # Wrap text for each column
            wrapped_columns = []
            max_lines = 1
            
            for i, text in enumerate(row_data):
                if text and text != 'N/A' and len(text) > col_widths[i] - 1:
                    wrapped = wrap_text(text, col_widths[i] - 1)
                    wrapped_columns.append(wrapped)
                    max_lines = max(max_lines, len(wrapped))
                else:
                    wrapped_columns.append([text])
            
            # Print each line of the wrapped text
            for line_num in range(max_lines):
                line = ""
                for col_num, wrapped_col in enumerate(wrapped_columns):
                    if line_num < len(wrapped_col):
                        text = wrapped_col[line_num]
                    else:
                        text = ""
                    line += f"{text:<{col_widths[col_num]}}"
                print(line.rstrip())


def print_venvs(arg_user, arg_group):
    """Main function to print virtual environments based on arguments."""
    
    # Handle specific cases for JSON output
    if arg_user:
        # Print user environments in JSON format
        try:
            metadata = load_user_metadata()
            print(json.dumps(metadata, indent=4))
        except Exception as e:
            print(f"Error loading user metadata: {e}")
            sys.exit(1)
        return
    
    if arg_group != '-1':
        # Print specific group environments in JSON format
        try:
            metadata = load_group_metadata(arg_group)
            print(json.dumps(metadata, indent=4))
        except Exception as e:
            print(f"Error loading group metadata for '{arg_group}': {e}")
            sys.exit(1)
        return
    
    # Default behavior: show all environments in formatted tables
    try:
        all_metadata = load_all_metadata()
        
        # Print group environments first
        for group_name, group_metadata in all_metadata['groups'].items():
            print_environments_table(group_metadata, f"group '{group_name}'")
        
        # Print user environments
        print_environments_table(all_metadata['user'])
        
        # Show example activation command if any environments exist
        user_envs = all_metadata['user'].get('environments', [])
        group_envs = []
        for group_metadata in all_metadata['groups'].values():
            group_envs.extend(group_metadata.get('environments', []))
        
        if user_envs or group_envs:
            example_env = None
            if user_envs:
                example_env = user_envs[0].get('name')
            elif group_envs:
                example_env = group_envs[0].get('name')
            
            if example_env:
                print(f"\nFor example, to activate '{example_env}' run this command:")
                print(f"$ source activate_venv {example_env}\n")
    
    except Exception as e:
        print(f"Error loading environment metadata: {e}")
        sys.exit(1)


def log_usage():
    """Log the list_venvs command usage."""
    logfilePath = os.path.join('/sw/hprc/sw/dor-hprc-tools-dashboard-utils/logs/venv.log')
    
    try:
        with open(logfilePath, 'a') as logfile:
            username = getpass.getuser()
            today = datetime.date.today()
            logString = f"{today} {username} list_venv NA\n"
            logfile.write(logString)
    except FileNotFoundError:
        print("Warning: The log file was not found where it was expected to be")
        print("This action was not logged")
    except Exception as e:
        print(f"Warning: Logging error: {e}")
        print("This action was not logged")


def main():
    parser = argparse.ArgumentParser(description="List Python virtual environments managed by ModuLair.")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-u", "--user", action="store_true", 
                      help="Print private virtual environments in JSON format.")
    group.add_argument("-g", "--group", help="Print shared virtual environments in JSON format.", 
                      default="-1")

    args = parser.parse_args()
    
    print_venvs(args.user, args.group)
    log_usage()


if __name__ == "__main__":
    main()
