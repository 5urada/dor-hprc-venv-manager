#!/usr/bin/env python3

# Created 10-31-24 by Gabriel Floreslovo 
# This script lists all of a user's virtual environments created by the create_venv script
# this is achieved by parsing the 'metadata.json' file in the user's '$SCRATCH/virtual_envs/' directory

import json
import os
import sys
import getpass
import datetime
import subprocess
def get_groups():
    scratch_path = os.environ.get('SCRATCH')
    user = os.path.basename(scratch_path.rstrip('/'))

    groups_command = f"groups {user} > groups.txt"
    remove_command = f"rm groups.txt"
    subprocess.run(groups_command, shell=True)

    with open("groups.txt", 'r') as file:
        for line in file:
            parts = line.strip().split(':')
            if len(parts) == 2:
                uname = parts[0].strip()
                group_list = parts[1].strip().split()

                
    subprocess.run(remove_command, shell=True)
    return group_list
def get_json(group_name):
    json_path = os.path.join("/", "scratch", "group", group_name, "virtual_envs", "metadata.json")
    try:
        with open(json_path, 'r') as file:
            data = json.load(file)
        return data
    except:
        return {}
def print_json(metadata, group_name="your $SCRATCH"):
    if len(metadata.get('environments',[])) == 0:
        print(f"\nYou have no environments in {group_name} currently available through 'activate_venv'\n")
    else:
        envs = metadata.get('environments', [])
        print(f"These are your virtual environments in {group_name} currently available through 'activate_venv':\n")
        # Define headers and column widths
        headers = ["Name", "Description", "Python Version", "GCC Version", "Toolchain", "Group", "Owner"]
        col_widths = [20, 25, 18, 15, 30, 20, 20]
        # Print the header row
        header_row = ""
        for i, header in enumerate(headers):
            header_row += f"{header:<{col_widths[i]}}"
        print(header_row)
        print("-" * sum(col_widths))
        # Print each environment row
        for env in envs:
            row = [
                env.get('name', 'N/A'),
                env.get('description', 'N/A'),
                env.get('python_version', 'N/A'),
                env.get('GCCcore_version', 'N/A'),
                env.get('toolchain', 'N/A'),
                env.get('group', 'N/A'),
                env.get('owner', 'N/A')
            ]
            formatted_row = ""
            for i, val in enumerate(row):
                formatted_row += f"{val:<{col_widths[i]}}"
            print(formatted_row)

def main():
        groups = get_groups()
        for g in groups:
                print_json(get_json(g), g)
        metadataPath = os.path.expandvars("$SCRATCH/virtual_envs/metadata.json")

        # Open and load the metadata file
        try: # Try to open metadata file
                with open(metadataPath, 'r') as file:
                        metadata = json.load(file)
        except FileNotFoundError as e: # Handle different errors
                print("Error: ", e)
                print("There was no metadata file found; you likely have not yet used 'create_venv' to make a virtual environment.")
                sys.exit(1)
        except json.JSONDecodeError as e:
                print("Error: ", e)
                print("The metadata file is corrupted or not in JSON format")
                sys.exit(1)
        except Exception as e:
                print("An unexpected error occured: ",e)
                sys.exit(1)
        except: 
                print("There was an error listing your environments")

        # Show the environments the user has in their directory
        print_json(metadata)
        print(f"\nFor example, to activate 'myvenv' run this command: ")
        print(f"$ source activate_venv myvenv\n")
        # Log usage
        # Format: day username action env_name
        logfilePath = os.path.join('/sw/hprc/sw/dor-hprc-tools-dashboard-utils/logs/venv.log')

        try:
                logfile = open(logfilePath,'a')

                username = getpass.getuser()
                today = datetime.date.today()
                logString = f"{today} {username} list_venv NA\n"
                logfile.write(logString)
        except FileNotFoundError as e:
                print(f"Error: {e}")
                print("The log file was not found where it was expected to be")
                print("This action was not logged")
                sys.exit(1)
        except Exception as e:
                print(f"Error: {e}")
                print("This action was not logged")
                sys.exit(1)
if __name__ == "__main__":
        main()
